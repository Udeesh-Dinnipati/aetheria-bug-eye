
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Loader, ShieldAlert, CheckCircle, AlertCircle, Bug } from "lucide-react";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { toast } from "@/components/ui/use-toast";
import { useNavigate } from "react-router-dom";

const VulnerabilityScanner = () => {
  const [url, setUrl] = useState("");
  const [scanning, setScanning] = useState(false);
  const [progress, setProgress] = useState(0);
  const [scanComplete, setScanComplete] = useState(false);
  const [scanResults, setScanResults] = useState<any>(null);
  const navigate = useNavigate();

  const startScan = async () => {
    if (!url) {
      toast({
        variant: "destructive",
        title: "Error",
        description: "Please enter a valid URL to scan",
      });
      return;
    }

    if (!url.startsWith("http://") && !url.startsWith("https://")) {
      toast({
        variant: "destructive",
        title: "Error",
        description: "URL must start with http:// or https://",
      });
      return;
    }

    setScanning(true);
    setScanComplete(false);
    setProgress(0);

    // Simulate scanning progress
    const interval = setInterval(() => {
      setProgress((prev) => {
        if (prev >= 100) {
          clearInterval(interval);
          return 100;
        }
        return prev + 5;
      });
    }, 300);

    // Simulate scan completion
    setTimeout(() => {
      clearInterval(interval);
      setProgress(100);
      setScanning(false);
      setScanComplete(true);
      
      // Mock results - in a real app, this would come from actual scanning
      setScanResults({
        url: url,
        timestamp: new Date().toISOString(),
        vulnerabilities: [
          {
            type: "XSS",
            severity: "high",
            description: "Potential Cross-Site Scripting vulnerability detected in input forms.",
            recommendation: "Implement proper input validation and sanitization.",
          },
          {
            type: "CSRF",
            severity: "medium",
            description: "Cross-Site Request Forgery vulnerability found in form submissions.",
            recommendation: "Implement CSRF tokens for all state-changing operations.",
          },
          {
            type: "Information Disclosure",
            severity: "low",
            description: "Server information disclosure through HTTP headers.",
            recommendation: "Configure server to minimize information in HTTP headers.",
          }
        ]
      });

      toast({
        title: "Scan Complete",
        description: "Vulnerability scan has been completed.",
      });
    }, 6000);
  };

  const resetScan = () => {
    setScanComplete(false);
    setScanResults(null);
    setProgress(0);
  };

  const generateReport = () => {
    if (!scanResults) return;
    
    // Store scan results in sessionStorage to access them in the Reports page
    sessionStorage.setItem('scanResults', JSON.stringify(scanResults));
    
    // Navigate to the Reports page
    navigate('/reports');
    
    toast({
      title: "Report Ready",
      description: "Your scan results have been transferred to the Report Builder.",
    });
  };

  const getSeverityBadge = (severity: string) => {
    switch (severity) {
      case "critical":
        return <div className="px-2 py-1 rounded-full bg-red-500/10 text-red-500 text-xs">Critical</div>;
      case "high":
        return <div className="px-2 py-1 rounded-full bg-orange-500/10 text-orange-500 text-xs">High</div>;
      case "medium":
        return <div className="px-2 py-1 rounded-full bg-yellow-500/10 text-yellow-500 text-xs">Medium</div>;
      case "low":
        return <div className="px-2 py-1 rounded-full bg-blue-500/10 text-blue-500 text-xs">Low</div>;
      default:
        return <div className="px-2 py-1 rounded-full bg-gray-500/10 text-gray-500 text-xs">Info</div>;
    }
  };

  return (
    <div className="w-full space-y-6">
      <Card className="border-2 border-matrix/30">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <ShieldAlert className="h-5 w-5 text-matrix" />
            Vulnerability Scanner
          </CardTitle>
          <CardDescription>
            Scan websites for common security vulnerabilities. This is a simulation for educational purposes only.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="flex gap-2">
              <Input
                placeholder="Enter website URL (e.g., https://example.com)"
                value={url}
                onChange={(e) => setUrl(e.target.value)}
                disabled={scanning}
                className="flex-1"
              />
              <Button 
                onClick={startScan} 
                disabled={scanning || !url}
                className={scanning ? "bg-matrix/50" : ""}
              >
                {scanning ? (
                  <>
                    <Loader className="mr-2 h-4 w-4 animate-spin" />
                    Scanning...
                  </>
                ) : (
                  "Start Scan"
                )}
              </Button>
            </div>

            {(scanning || scanComplete) && (
              <div className="space-y-2">
                <div className="flex justify-between text-sm">
                  <span>Scan Progress</span>
                  <span>{progress}%</span>
                </div>
                <Progress value={progress} className="h-2" />
              </div>
            )}
          </div>
        </CardContent>
      </Card>

      {scanComplete && scanResults && (
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-lg">Scan Results</CardTitle>
            <CardDescription>
              Found {scanResults.vulnerabilities.length} potential vulnerabilities on {scanResults.url}
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Tabs defaultValue="vulnerabilities">
              <TabsList className="mb-4">
                <TabsTrigger value="vulnerabilities">Vulnerabilities</TabsTrigger>
                <TabsTrigger value="summary">Summary</TabsTrigger>
                <TabsTrigger value="recommendations">Recommendations</TabsTrigger>
              </TabsList>
              
              <TabsContent value="vulnerabilities" className="space-y-4">
                {scanResults.vulnerabilities.map((vuln: any, i: number) => (
                  <div key={i} className="p-4 border rounded-lg">
                    <div className="flex justify-between items-start mb-2">
                      <h3 className="font-semibold">{vuln.type}</h3>
                      {getSeverityBadge(vuln.severity)}
                    </div>
                    <p className="text-sm text-muted-foreground mb-2">{vuln.description}</p>
                    <div className="text-sm bg-background p-2 rounded-md">
                      <span className="font-semibold text-matrix">Recommendation: </span> 
                      {vuln.recommendation}
                    </div>
                  </div>
                ))}
              </TabsContent>
              
              <TabsContent value="summary">
                <div className="space-y-4">
                  <div className="grid grid-cols-2 gap-4">
                    <div className="p-4 border rounded-lg">
                      <div className="text-lg font-semibold mb-1">Scan Details</div>
                      <div className="text-sm text-muted-foreground">URL: {scanResults.url}</div>
                      <div className="text-sm text-muted-foreground">Date: {new Date(scanResults.timestamp).toLocaleString()}</div>
                    </div>
                    <div className="p-4 border rounded-lg">
                      <div className="text-lg font-semibold mb-1">Risk Level</div>
                      <div className="text-orange-500 text-xl font-bold">Medium</div>
                      <div className="text-sm text-muted-foreground">Based on discovered vulnerabilities</div>
                    </div>
                  </div>
                </div>
              </TabsContent>
              
              <TabsContent value="recommendations">
                <div className="space-y-4">
                  {scanResults.vulnerabilities.map((vuln: any, i: number) => (
                    <div key={i} className="p-4 border rounded-lg">
                      <h3 className="font-semibold flex items-center gap-2">
                        <CheckCircle className="h-4 w-4 text-matrix" />
                        Fixing {vuln.type}
                      </h3>
                      <p className="text-sm text-muted-foreground my-2">{vuln.recommendation}</p>
                      <div className="text-sm bg-background p-2 rounded-md">
                        <span className="font-semibold">Learn more: </span>
                        <a href="#" className="text-matrix underline">Best practices for preventing {vuln.type}</a>
                      </div>
                    </div>
                  ))}
                </div>
              </TabsContent>
            </Tabs>
          </CardContent>
          <CardFooter>
            <Button variant="outline" onClick={resetScan} className="mr-2">
              Reset
            </Button>
            <Button onClick={generateReport}>
              Generate Report
            </Button>
          </CardFooter>
        </Card>
      )}
    </div>
  );
};

export default VulnerabilityScanner;
